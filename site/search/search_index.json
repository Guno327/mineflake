{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#synopsis","title":"Synopsis","text":"<p>This project is a NixOS module that seeks to allow you to host the minecraft server of your dreams. It currently has support for vanilla version, but FTB, CurseForge, and Custom modpack support is in the works.</p>"},{"location":"#mcfetch","title":"McFetch","text":"<p>The main interesting part of this project is McFetch. It is the python script that I am writting to fetch, index, and hash every modpack I can find and all of its dependencies. At the core of NixOS is the idea that all builds should be reproducible. In order to achieve this goal Nix is built around the core ideals of functional programming, that being given the same inputs you will always produce the same output (with little to no side-effects). This is only possible if you can ensure that all of your build inputs are exactly the SAME. McFetch if what is going to allow this module to produce these functionally pure minecraft server derivations. It works by scrapping the web for modpack/version manifests, reading through them, fetching all required files, then indexing and hashing them. It then uses this database of files and dependencies to build the inputs for a given modpack/version. This means at build time all fetched files can be checked against the recorded hashes to make sure nothing has changed since the script recorded them. While this does not protect against problems that arise from the actual dependencies themselves, it allows us to limit the variables that we are working with when having to debug a non-working server.</p>"},{"location":"#setup","title":"Setup","text":"<p>For now this is just a standard flake module, there are plans for a stand-alone docker image and web-ui to allow non-NixOS users to leverage the benefits of functional, atomic builds on whatever system they are already using. For the guide I am going to assume you are using a system flake:</p>"},{"location":"#1-import-flake-in-flakenix","title":"1. Import Flake in <code>flake.nix</code>","text":"<pre><code>inputs = {\n    mineflake.url = \"github:guno327/mineflake\";\n}\n\noutputs = {\n    mineflake,\n}\n</code></pre>"},{"location":"#2-import-desired-modules-only-vanilla-currently","title":"2. Import Desired Modules (only vanilla currently)","text":"<pre><code>nixosConfigurations.&lt;name&gt;.modules = [\n    mineflake.nixosModules.vanilla\n]\n</code></pre>"},{"location":"#3-configure-instance-in-configurationnix","title":"3. Configure Instance in <code>configuration.nix</code>","text":"<pre><code>mineflake.vanilla = {\n    enable = true;\n    ...\n}\n</code></pre> <p>Please view the options to see what you can configure</p>"},{"location":"options/","title":"Standard Options","text":""},{"location":"options/#version","title":"<code>version</code>","text":"<ul> <li>type: str</li> <li>default: \"latest\"</li> <li>description: Server version</li> </ul>"},{"location":"options/#dir","title":"<code>dir</code>","text":"<ul> <li>type: path</li> <li>default: <code>/var/lib/minecraft</code></li> <li>description: Directory to store server files</li> </ul>"},{"location":"options/#name","title":"<code>name</code>","text":"<ul> <li>type: str</li> <li>default: \"server\"</li> <li>description: The name of the instance</li> </ul>"},{"location":"options/#flags","title":"<code>flags</code>","text":"<ul> <li>type: str</li> <li>default: aikars flags</li> <li>description: Java launch flags</li> </ul>"},{"location":"options/#java","title":"<code>java</code>","text":"<ul> <li>type: package</li> <li>default <code>pkgs.jdk21</code></li> <li>description: Java package to run the server with</li> </ul>"},{"location":"options/#eula","title":"<code>eula</code>","text":"<ul> <li>type: str</li> <li>default: \"false\"</li> <li>description: Whether to accept the EULA</li> </ul>"},{"location":"options/#serverproperties","title":"<code>serverProperties</code>","text":"<ul> <li>type: submodule</li> <li>default: {}</li> <li>description: Please see the Server Property options</li> </ul>"},{"location":"options/#server-properties","title":"Server Properties","text":""},{"location":"options/#description","title":"Description","text":"<p>The options that are allowed in the server properties submodule are exactly the same as those defined in <code>server.properties</code>. Please view the wiki for names, types, limits, and default values.</p>"},{"location":"options/#example","title":"Example:","text":"<pre><code>serverProperties = {\n    allow-flight = true;\n    difficulty = \"hard\";\n    \"rcon.port\" = 25585;\n    simulation-distance = 20;\n};\n</code></pre>"}]}